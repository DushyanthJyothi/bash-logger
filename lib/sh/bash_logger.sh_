#!/usr/bin/env bash

###################################################
# Script to print log4j style messages for logging
# at different levels:
#  TRACE > DEBUG > INFO > WARN > ERROR > FATAL
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
# Author : Dushyanth Jyothi
# Copyright (c) 2017 Dushyanth Jyothi
# Usage: please see test.sh script
##################################################

# TODO(dushyanth): lots of repeat code (improve)

set -u
set -e

declare -gA __log_levels=([TRACE]=TRACE [DEBUG]=DEBUG [INFO]=INFO [WARN]=WARN [ERROR]=ERROR [FATAL]=FATAL)

log_level=
#start_time=$(date +%s)

function set_log_level() {
  if [ -z "$1" ]; then
    echo "No log level provided, setting to INFO log level"
    log_level="INFO"
  else
    log_level="$1"
    if [[ ! "${__log_levels[${log_level}]+isset}" ]]; then
      echo "Log level provided $1 is not avalid, setting to INFO log level"
      log_level="INFO"
    fi
  fi
}



# Default log : INFO
function log() {
  local __bl_script_name
  __bl_script_name="${BASH_SOURCE[1]}"
  __bl_script_name="${__bl_script_name##*/}"

  local __bl_function_name
  __bl_function_name="${FUNCNAME[1]}"

  local __bl_called_line_number
  __bl_called_line_number="${BASH_LINENO[0]}"

  local __bl_log_message
  __bl_log_message="$*"

  local time_and_date
  time_and_date=$(date '+%d-%m-%Y %H:%M:%S')
  echo "${time_and_date} - ${__bl_script_name}:${__bl_function_name}:${__bl_called_line_number} - ${__bl_log_message}"
}

# TRACE: designates finer-grained informational events than the DEBUG
function log_trace() {
  declare -A __bl_allowed_log_levels
  __bl_allowed_log_levels=([TRACE]=TRACE)
  if [[ "${__bl_allowed_log_levels[${log_level}]+isset}" ]]; then
    __bl_log_message_type="TRACE"

    local __bl_script_name
    __bl_script_name="${BASH_SOURCE[1]}"
    __bl_script_name="${__bl_script_name##*/}"

    local __bl_function_name
    __bl_function_name="${FUNCNAME[1]}"

    local __bl_called_line_number
    __bl_called_line_number="${BASH_LINENO[0]}"


    local __bl_log_message
    __bl_log_message="$*"

    local __bl_functions_length
    __bl_functions_length=${#FUNCNAME[@]}

    #${FUNCNAME[$i]} was called from the file ${BASH_SOURCE[$i+1]} at line number ${BASH_LINENO[$i]}
    local time_and_date
    time_and_date=$(date '+%d-%m-%Y %H:%M:%S')
    echo "${time_and_date} - ${__bl_script_name}:${__bl_function_name}:${__bl_called_line_number} - ${__bl_log_message_type} - ${__bl_log_message}"

  if [ ${#FUNCNAME[@]} -gt 2 ]; then
    echo "${time_and_date} - ${__bl_script_name}:${__bl_function_name}:${__bl_called_line_number} - ${__bl_log_message_type} - Execution call stack:"
  fi

    for (( i=0; i < __bl_functions_length; i++ )); do
      if [ ! $i ==  $(( __bl_functions_length - 1 )) ]; then
        if [[ "${BASH_SOURCE[$i]}" != *"bash_logger"* ]]; then
           echo "   ${BASH_SOURCE[$i+1]//.\//}:${BASH_LINENO[$i]} ${FUNCNAME[$i]}(..)"
        fi
      else
        echo "    ${BASH_SOURCE[$i]//.\//}:${BASH_LINENO[$i]} ${FUNCNAME[$i]}(..)"
      fi
    done
  fi
}


# DEBUG: designates fine-grained informational events that are most useful to debug an application.
function log_debug() {
  declare -A __bl_allowed_log_levels
  __bl_allowed_log_levels=([TRACE]=TRACE [DEBUG]=DEBUG)
  if [[ "${__bl_allowed_log_levels[${log_level}]+isset}" ]]; then
    __bl_log_message_type="DEBUG"

    local __bl_script_name
    __bl_script_name="${BASH_SOURCE[1]}"
    __bl_script_name="${__bl_script_name##*/}"

    local __bl_function_name
    __bl_function_name="${FUNCNAME[1]}"

  local __bl_called_line_number
  __bl_called_line_number="${BASH_LINENO[0]}"

    local __bl_log_message
    __bl_log_message="$*"

    local time_and_date
    time_and_date=$(date '+%d-%m-%Y %H:%M:%S')
    echo "${time_and_date} - ${__bl_script_name}:${__bl_function_name}:${__bl_called_line_number} - ${__bl_log_message_type} - ${__bl_log_message}"
  fi
}


# INFO: designates informational messages that highlight the progress of the application at coarse-grained level.
function log_info() {
  declare -A __bl_allowed_log_levels
  __bl_allowed_log_levels=([TRACE]=TRACE [DEBUG]=DEBUG [INFO]=INFO)
  if [[ "${__bl_allowed_log_levels[${log_level}]+isset}" ]]; then
    __bl_log_message_type="INFO"

    local __bl_script_name
    __bl_script_name="${BASH_SOURCE[1]}"
    __bl_script_name="${__bl_script_name##*/}"

    local __bl_function_name
    __bl_function_name="${FUNCNAME[1]}"

  local __bl_called_line_number
  __bl_called_line_number="${BASH_LINENO[0]}"

    local __bl_log_message
    __bl_log_message="$*"

    local time_and_date
    time_and_date=$(date '+%d-%m-%Y %H:%M:%S')
    echo "${time_and_date} - ${__bl_script_name}:${__bl_function_name}:${__bl_called_line_number} - ${__bl_log_message_type} - ${__bl_log_message}"
  fi
}

# WARN: designates potentially harmful situations.
function log_warn() {
  declare -A __bl_allowed_log_levels
  __bl_allowed_log_levels=([TRACE]=TRACE [DEBUG]=DEBUG [INFO]=INFO [WARN]=WARN)
  if [[ "${__bl_allowed_log_levels[${log_level}]+isset}" ]]; then
    __bl_log_message_type="WARN"

    local __bl_script_name
    __bl_script_name="${BASH_SOURCE[1]}"
    __bl_script_name="${__bl_script_name##*/}"

    local __bl_function_name
    __bl_function_name="${FUNCNAME[1]}"

  local __bl_called_line_number
  __bl_called_line_number="${BASH_LINENO[0]}"

    local __bl_log_message
    __bl_log_message="$*"

    local time_and_date
    time_and_date=$(date '+%d-%m-%Y %H:%M:%S')
    echo "${time_and_date} - ${__bl_script_name}:${__bl_function_name}:${__bl_called_line_number} - ${__bl_log_message_type} - ${__bl_log_message}"
  fi
}


# ERROR: designates error events that might still allow the application to continue running.
function log_error() {
  declare -A __bl_allowed_log_levels
  __bl_allowed_log_levels=([TRACE]=TRACE [DEBUG]=DEBUG [INFO]=INFO [WARN]=WARN [ERROR]=ERROR)
  if [[ "${__bl_allowed_log_levels[${log_level}]+isset}" ]]; then
    __bl_log_message_type="ERROR"

    local __bl_script_name
    __bl_script_name="${BASH_SOURCE[1]}"
    __bl_script_name="${__bl_script_name##*/}"

    local __bl_function_name
    __bl_function_name="${FUNCNAME[1]}"

  local __bl_called_line_number
  __bl_called_line_number="${BASH_LINENO[0]}"

    local __bl_log_message
    __bl_log_message="$*"

    local time_and_date
    time_and_date=$(date '+%d-%m-%Y %H:%M:%S')
    echo "${time_and_date} - ${__bl_script_name}:${__bl_function_name}:${__bl_called_line_number} - ${__bl_log_message_type} - ${__bl_log_message}" >&2
  fi
}


# FATAL: designates very severe error events that will presumably lead the application to abort.
function log_fatal() {
  declare -A __bl_allowed_log_levels
  __bl_allowed_log_levels=([TRACE]=TRACE [DEBUG]=DEBUG [INFO]=INFO [WARN]=WARN [ERROR]=ERROR [FATAL]=FATAL)
  if [[ "${__bl_allowed_log_levels[${log_level}]+isset}" ]]; then
    __bl_log_message_type="FATAL"

    local __bl_script_name
    __bl_script_name="${BASH_SOURCE[1]}"
    __bl_script_name="${__bl_script_name##*/}"

    local __bl_function_name
    __bl_function_name="${FUNCNAME[1]}"

  local __bl_called_line_number
  __bl_called_line_number="${BASH_LINENO[0]}"

    local __bl_log_message
    __bl_log_message="$*"

    local time_and_date
    time_and_date=$(date '+%d-%m-%Y %H:%M:%S')
    echo "${time_and_date} - ${__bl_script_name}:${__bl_function_name}:${__bl_called_line_number} - ${__bl_log_message_type} - ${__bl_log_message}" >&2
  fi
}

# info message to log start of something
function log_start() {
  #start_time=$(date +%s)

  local __bl_script_name
  __bl_script_name="${BASH_SOURCE[1]}"
  __bl_script_name="${__bl_script_name##*/}"

  local __bl_function_name
  __bl_function_name="${FUNCNAME[1]}"

  local __bl_called_line_number
  __bl_called_line_number="${BASH_LINENO[0]}"

  local __bl_log_message
  __bl_log_message="STARTED ${__bl_function_name^^}"

  local time_and_date
  time_and_date=$(date '+%d-%m-%Y %H:%M:%S')
  echo "${time_and_date} - ${__bl_script_name}:${__bl_function_name}:${__bl_called_line_number} - ${__bl_log_message}"
}

# info message to log end of something
function log_finish() {
  local __bl_script_name
  __bl_script_name="${BASH_SOURCE[1]}"
  __bl_script_name="${__bl_script_name##*/}"

  local __bl_function_name
  __bl_function_name="${FUNCNAME[1]}"

  local __bl_called_line_number
  __bl_called_line_number="${BASH_LINENO[0]}"

  local __bl_log_message
  __bl_log_message="FINISHED"

  local time_and_date
  time_and_date=$(date '+%d-%m-%Y %H:%M:%S')
  #run_time=$(( $(date +%s) - $start_time ))
  #__bl_log_message="FINISHED ${__bl_function_name^^} - Took: $((run_time / 3600))h:$(( (run_time % 3600) / 60 ))m:$(( (run_time % 3600) % 60 ))s"

  echo "${time_and_date} - ${__bl_script_name}:${__bl_function_name}:${__bl_called_line_number} - ${__bl_log_message}"
  echo ""
}

